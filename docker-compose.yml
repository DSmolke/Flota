version: '3.8'
# TODO 1 RozdzieliÄ‡ docker-composy na mniejsze byty

services:
  # ===================================================================================
  # API GATEWAY MAIN DATABASE
  # ===================================================================================
  mysql_api_gateway:
    image: mysql:latest
    volumes:
      - mysql_api_gateway:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: db_1
      MYSQL_USER: user
      MYSQL_PASSWORD: user1234
      MYSQL_TCP_PORT: 3307
    ports:
      - '3307:3307'
    expose:
      - 3307

    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
    networks:
      - flota-network

#  # ===================================================================================
#  # API GATEWAY TEST DATABASE
#  # ===================================================================================
  mysql_test_api_gateway:
    image: mysql:latest
    volumes:
      - mysql_test_api_gateway:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: db_test
      MYSQL_USER: user
      MYSQL_PASSWORD: user1234
      MYSQL_TCP_PORT: 3308
    ports:
      - '3308:3308'
    expose:
      - 3308

    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
    networks:
      - flota-network

#  # ===================================================================================
#  # CARS MAIN DATABASE
#  # ===================================================================================
  mysql_cars:
    image: mysql:latest
    volumes:
      - mysql_cars:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: db_1
      MYSQL_USER: user
      MYSQL_PASSWORD: user1234
      MYSQL_TCP_PORT: 3309
    ports:
      - '3309:3309'
    expose:
      - 3309

    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
    networks:
      - flota-network

#  # ===================================================================================
#  # CARS TEST DATABASE
#  # ===================================================================================
  mysql_test_cars:
    image: mysql:latest
    volumes:
      - mysql_test_cars:/var/lib/mysql

    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: db_test
      MYSQL_USER: user
      MYSQL_PASSWORD: user1234
      MYSQL_TCP_PORT: 3310
    ports:
      - '3310:3310'
    expose:
      - 3310

    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
    networks:
      - flota-network

#  # ===================================================================================
#  # MOTS MAIN DATABASE
#  # ===================================================================================
  mysql_mots:
    image: mysql:latest
    volumes:
      - mysql_mots:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: db_1
      MYSQL_USER: user
      MYSQL_PASSWORD: user1234
      MYSQL_TCP_PORT: 3311
    ports:
      - '3311:3311'
    expose:
      - 3311

    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
    networks:
      - flota-network

#  # ===================================================================================
#  # MOTS TEST DATABASE
#  # ===================================================================================
  mysql_test_mots:
    image: mysql:latest
    volumes:
      - mysql_test_mots:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: db_test
      MYSQL_USER: user
      MYSQL_PASSWORD: user1234
      MYSQL_TCP_PORT: 3312
    ports:
      - '3312:3312'
    expose:
      - 3312

    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
    networks:
      - flota-network


#  # ===================================================================================
#  # INSURANCES MAIN DATABASE
#  # ===================================================================================
  mysql_insurances:
    image: mysql:latest
    volumes:
      - mysql_insurances:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: db_1
      MYSQL_USER: user
      MYSQL_PASSWORD: user1234
      MYSQL_TCP_PORT: 3313
    ports:
      - '3313:3313'
    expose:
      - 3313

    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
    networks:
      - flota-network

#  # ===================================================================================
#  # INSURANCES TEST DATABASE
#  # ===================================================================================
  mysql_test_insurances:
    image: mysql:latest
    volumes:
      - mysql_test_insurances:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: db_test
      MYSQL_USER: user
      MYSQL_PASSWORD: user1234
      MYSQL_TCP_PORT: 3314
    ports:
      - '3314:3314'
    expose:
      - 3314

    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
    networks:
      - flota-network

#  # ===================================================================================
#  # REPAIRS MAIN DATABASE
#  # ===================================================================================
  mysql_repairs:
    image: mysql:latest
    volumes:
      - mysql_repairs:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: db_1
      MYSQL_USER: user
      MYSQL_PASSWORD: user1234
      MYSQL_TCP_PORT: 3315
    ports:
      - '3315:3315'
    expose:
      - 3315

    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
    networks:
      - flota-network

#  # ===================================================================================
#  # REPAIRS TEST DATABASE
#  # ===================================================================================
  mysql_test_repairs:
    image: mysql:latest
    volumes:
      - mysql_test_repairs:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: db_test
      MYSQL_USER: user
      MYSQL_PASSWORD: user1234
      MYSQL_TCP_PORT: 3316
    ports:
      - '3316:3316'
    expose:
      - 3316

    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
    networks:
      - flota-network

#  # ===================================================================================
#  # DRIVERS MAIN DATABASE
#  # ===================================================================================
  mysql_drivers:
    image: mysql:latest
    volumes:
      - mysql_drivers:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: db_1
      MYSQL_USER: user
      MYSQL_PASSWORD: user1234
      MYSQL_TCP_PORT: 3317
    ports:
      - '3317:3317'
    expose:
      - 3317
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
    networks:
      - flota-network

#  # ===================================================================================
#  # DRIVERS TEST DATABASE
#  # ===================================================================================
  mysql_test_drivers:
    image: mysql:latest
    volumes:
      - mysql_test_drivers:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: db_test
      MYSQL_USER: user
      MYSQL_PASSWORD: user1234
      MYSQL_TCP_PORT: 3318
    ports:
      - '3318:3318'
    expose:
      - 3318

    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
    networks:
      - flota-network

#  # ===================================================================================
#  # CARS SERVICE
#  # ===================================================================================
  cars:
    build:
      context: ./cars
      dockerfile: Dockerfile

    command: gunicorn --bind 0.0.0.0:8001 --workers 1 'app.create_app:main()' --reload
    volumes:
      - ./cars:/webapp

    depends_on:
      mysql_cars:
        condition: service_healthy
      mysql_test_cars:
        condition: service_healthy
    ports:
      - "8001:8001"
    networks:
      flota-network:
        aliases:
          - cars-service

#  # ===================================================================================
#  # MOTS SERVICE
#  # ===================================================================================
  mots:
    build:
      context: ./mots
      dockerfile: Dockerfile

    command: gunicorn --bind 0.0.0.0:8002 --workers 1 'app.create_app:main()' --reload
    volumes:
      - ./mots:/webapp

    depends_on:
      mysql_mots:
        condition: service_healthy
      mysql_test_mots:
        condition: service_healthy
    ports:
      - "8002:8002"
    networks:
      flota-network:
        aliases:
          - mots-service
  # ===================================================================================
  # AWS-RESOURCES MICROSERVICE
  # ===================================================================================
  aws-resources:
    build:
      context: ./aws-resources
      dockerfile: Dockerfile

    command: gunicorn --bind 0.0.0.0:8003 --workers 1 'app.create_app:main()' --reload
    volumes:
      - ./aws-resources:/webapp

    ports:
      - "8003:8003"
    networks:
      flota-network:
        aliases:
          - aws-resources-service

  # ===================================================================================
  # INSURANCES MICROSERVICE
  # ===================================================================================
  insurances:
    build:
      context: ./insurances
      dockerfile: Dockerfile

    command: gunicorn --bind 0.0.0.0:8004 --workers 1 'app.create_app:main()' --reload
    volumes:
      - ./insurances:/webapp

    depends_on:
      mysql_insurances:
        condition: service_healthy
      mysql_test_insurances:
        condition: service_healthy

    ports:
      - "8004:8004"
    networks:
      flota-network:
        aliases:
          - insurances-service

  # ===================================================================================
  # REPAIRS MICROSERVICE
  # ===================================================================================
  repairs:
    build:
      context: ./repairs
      dockerfile: Dockerfile

    command: gunicorn --bind 0.0.0.0:8005 --workers 1 'app.create_app:main()' --reload
    volumes:
      - ./repairs:/webapp

    depends_on:
      mysql_repairs:
        condition: service_healthy
      mysql_test_repairs:
        condition: service_healthy

    ports:
      - "8005:8005"
    networks:
      flota-network:
        aliases:
          - repairs-service

#   ===================================================================================
#   CEPIK MICROSERVICE
#   ===================================================================================
  cepik:
    build:
      context: ./cepik
      dockerfile: Dockerfile

    command: gunicorn --bind 0.0.0.0:8006 --workers 1 'app.create_app:main()' --reload
    volumes:
      - ./cepik:/webapp



    ports:
      - "8006:8006"
    networks:
      flota-network:
        aliases:
          - cepik-service

#   ===================================================================================
#   EXTERNAL-RESOURCES-FACTORY MICROSERVICE
#   ===================================================================================
  external-resources-factory:
    build:
      context: ./external-resources-factory
      dockerfile: Dockerfile

    command: gunicorn --bind 0.0.0.0:8007 --workers 1 'app.create_app:main()' --reload
    volumes:
      - ./external-resources-factory:/webapp



    ports:
      - "8007:8007"
    networks:
      flota-network:
        aliases:
          - external-resources-factory
  # ===================================================================================
  # DRIVERS MICROSERVICE
  # ===================================================================================
  drivers:
    build:
      context: ./drivers
      dockerfile: Dockerfile

    command: gunicorn --bind 0.0.0.0:8008 --workers 1 'app.create_app:main()' --reload
    volumes:
      - ./drivers:/webapp

    depends_on:
      mysql_drivers:
        condition: service_healthy
      mysql_test_drivers:
        condition: service_healthy

    ports:
      - "8008:8008"
    networks:
      flota-network:
        aliases:
          - drivers-service
  # ===================================================================================
  # DRIVERS MICROSERVICE
  # ===================================================================================
  drivers-django:
    build:
      context: ./drivers_django
      dockerfile: Dockerfile

    command: gunicorn --bind 0.0.0.0:8108 --workers 1 'app.wsgi:application' --reload
#    command: dir
    volumes:
      - ./drivers_django:/opt/services/djangoapp/src

    depends_on:
      mysql_drivers:
        condition: service_healthy
      mysql_test_drivers:
        condition: service_healthy

    ports:
      - "8108:8108"
    networks:
      flota-network:
        aliases:
          - drivers-django-service

  # ===================================================================================
  # NOTIFICATIONS MICROSERVICE
  # ===================================================================================
  notifications:
    build:
      context: ./notifications
      dockerfile: Dockerfile

    command: gunicorn --bind 0.0.0.0:8009 --workers 1 'app.create_app:main()' --reload
    volumes:
      - ./notifications:/webapp

    ports:
      - "8009:8009"
    networks:
      flota-network:
        aliases:
          - notifications-service
  # ===================================================================================
  # SCHEDULER MICROSERVICE
  # ===================================================================================
  scheduler:
    build:
      context: ./scheduler
      dockerfile: Dockerfile

    command: python ./app/scheduler.py
    volumes:
      - ./scheduler:/webapp
    networks:
      flota-network:
        aliases:
          - scheduler-service

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile

    command: gunicorn --bind 0.0.0.0:8000 --workers 1 'app.create_app:main()' --reload

    volumes:
      - ./api-gateway:/webapp
    depends_on:
      mysql_api_gateway:
        condition: service_healthy
      mysql_test_api_gateway:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      flota-network:
        aliases:
          - api-gateway-service

  nginx:
    image: nginx:latest
    volumes:
      - ./api-gateway/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - '80:80'
    networks:
      - flota-network
    depends_on:
      - api-gateway


volumes:
  mysql_api_gateway:
  mysql_test_api_gateway:
  mysql_cars:
  mysql_test_cars:
  mysql_mots:
  mysql_test_mots:
  mysql_insurances:
  mysql_test_insurances:
  mysql_repairs:
  mysql_test_repairs:
  mysql_drivers:
  mysql_test_drivers:
networks:
  flota-network:
